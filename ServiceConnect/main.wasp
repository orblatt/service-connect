app ServiceConnect {
  wasp: {
    version: "^0.13.2"
  },
  title: "Service Connect",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
  emailSender: {
    provider: Mailgun,
    defaultFrom: {
      name: "Tomer Yahpes",
      email: "tomer.yahpes@service-connect.me"
    }
  },
  db: {
    system: PostgreSQL,
    seeds: [
      import { devSeedSimple } from "@src/dbSeeds"
    ]
  }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import { MainPage } from "@src/client/app/MainPage"
}

route MyJobAdsRoute { path: "/my-job-ads", to: MyJobAdsPage }
page MyJobAdsPage {
  authRequired: true,
  component: import { MyJobAdsPage } from "@src/client/app/MyJobAdsPage"
}

route SearchJobAdsRoute { path: "/search-job-ads", to: SearchJobAdsPage }
page SearchJobAdsPage {
  authRequired: true,
  component: import { SearchJobAdsPage } from "@src/client/app/SearchJobAdsPage"
}

route CreateJobAdRoute { path: "/create-job-ad", to: CreateJobAdPage }
page CreateJobAdPage {
  authRequired: true,
  component: import { CreateJobAdPage } from "@src/client/app/CreateJobAdPage"
}

route SettingsRoute { path: "/settings", to: SettingsPage }
page SettingsPage {
  authRequired: true,
  component: import { SettingsPage } from "@src/client/app/SettingsPage"
}

entity JobAd {=psl
    id          Int     @id @default(autoincrement())
    description String
    price       Float
    isDone      Boolean @default(false)
    createdAt   DateTime @default(now())
    owner        User    @relation(name: "createdBy", fields: [ownerId], references: [id])
    ownerId      Int
    provider     User?    @relation(name: "servedBy", fields: [providerId], references: [id])
    providerId   Int?   
    category    String 
    city        String
    title       String
    duration    Int
    youngestChildAge Int?
    toolsProvided Boolean?
    numberOfRooms Float?
psl=}

query getJobAds {
  fn: import { getJobAds } from "@src/queries",
  entities: [JobAd]
}

query getFilteredJobAds {
  fn: import { getFilteredJobAds } from "@src/queries",
  entities: [JobAd]
}

action createJobAd {
  fn: import { createJobAd } from "@src/actions",
  entities: [JobAd]
}

action updateJobAd {
  fn: import { updateJobAd } from "@src/actions",
  entities: [JobAd]
}

action updateJobAdProvider {
  fn: import { updateJobAdProvider } from "@src/actions",
  entities: [JobAd]
}

action sendEmail {
  fn: import { sendEmail } from "@src/actions",
  // entities: [JobAd]
}

action deleteSearchProfiles {
  fn: import { deleteSearchProfiles } from "@src/actions",
  entities: [SearchProfile]
}


entity SearchProfile {=psl
    id          Int     @id @default(autoincrement())
    emails      String[]
    interval    String
    minPrice    Float
    maxPrice    Float
    isDone      Boolean @default(false)
    createdAt   DateTime @default(now()) @db.Timestamptz
    searcher    User    @relation(name: "searchedBy", fields: [searcherId], references: [id])
    searcherId  Int
    category    String?
psl=}

action createSearchProfile {
  fn: import { createSearchProfile } from "@src/actions",
  entities: [SearchProfile]
}

query getFilteredSearchProfiles {
  fn: import { getFilteredSearchProfiles } from "@src/queries",
  entities: [SearchProfile]
}

entity User {=psl
    id       Int    @id @default(autoincrement())
    isProvider Boolean @default(false)
    jobAdsOwned     JobAd[] @relation(name: "createdBy")
    jobAdsProvided  JobAd[] @relation(name: "servedBy")
    searchProfiles  SearchProfile[] @relation(name: "searchedBy")
psl=}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/LoginPage"
}

job smartAgentJob {
  executor: PgBoss,
  perform: {
    fn: import { emailDigest } from "@src/workers/smartAgent"
  },
  schedule: {
    cron: "* * * * *", // Every minute
    args: {=json { "interval": "Minutely" } json=}
  },
  entities: [SearchProfile, JobAd]
}

job hourlySmartAgentJob {
  executor: PgBoss,
  perform: {
    fn: import { emailDigest } from "@src/workers/smartAgent"
  },
  schedule: {
    cron: "0 * * * *", // Every hour
    args: {=json { "interval": "Hourly" } json=}
  },
  entities: [SearchProfile, JobAd]
}

job dailySmartAgentJob {
  executor: PgBoss,
  perform: {
    fn: import { emailDigest } from "@src/workers/smartAgent"
  },
  schedule: {
    cron: "0 10 * * *", // Every day at 10:00am
    args: {=json { "interval": "Daily" } json=}
  },
  entities: [SearchProfile, JobAd]
}

job weeklySmartAgentJob {
  executor: PgBoss,
  perform: {
    fn: import { emailDigest } from "@src/workers/smartAgent"
  },
  schedule: {
    cron: "0 10 * * SUN", // Every Sunday at 10:00am
    args: {=json { "interval": "Weekly" } json=}
  },
  entities: [SearchProfile, JobAd]
}

query getUserById {
  fn: import { getUserById } from "@src/queries",
  entities: [User],
}